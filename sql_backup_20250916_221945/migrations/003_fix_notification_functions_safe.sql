-- ============================================================================
-- MIGRATION 003: Corrigir Sistema de Notifica√ß√µes (VERS√ÉO SEGURA)
-- ============================================================================
-- Data: 2025-09-16
-- Objetivo: Criar fun√ß√µes auxiliares faltantes e implementar notifica√ß√µes de n√≠vel
-- Estrat√©gia: Migra√ß√£o segura sem quebrar fun√ß√µes existentes
-- ============================================================================

-- Verificar estado atual
-- ============================================================================

DO $$
BEGIN
    RAISE NOTICE 'üîç VERIFICANDO ESTADO ATUAL DAS NOTIFICA√á√ïES...';
    RAISE NOTICE '';
END $$;

-- Verificar se fun√ß√µes auxiliares existem e seus tipos
SELECT 
    'FUN√á√ïES AUXILIARES:' as info,
    CASE WHEN EXISTS (
        SELECT 1 FROM pg_proc WHERE proname = 'create_single_notification'
    ) THEN '‚ö†Ô∏è create_single_notification EXISTS'
    ELSE '‚ùå create_single_notification MISSING' END as create_single,
    
    CASE WHEN EXISTS (
        SELECT 1 FROM pg_proc WHERE proname = 'notify_streak_milestone_correct'
    ) THEN '‚ö†Ô∏è notify_streak_milestone_correct EXISTS'
    ELSE '‚ùå notify_streak_milestone_correct MISSING' END as notify_streak;

-- Verificar tipo de retorno atual da fun√ß√£o (se existir)
SELECT 
    'TIPO ATUAL:' as info,
    p.proname as function_name,
    t.typname as return_type,
    pg_get_function_arguments(p.oid) as arguments
FROM pg_proc p
JOIN pg_type t ON p.prorettype = t.oid
WHERE p.proname = 'create_single_notification';

-- Estrat√©gia segura: Criar fun√ß√µes tempor√°rias primeiro
-- ============================================================================

DO $$
BEGIN
    RAISE NOTICE 'üîß CRIANDO FUN√á√ïES TEMPOR√ÅRIAS SEGURAS...';
END $$;

-- 1. CREATE_SINGLE_NOTIFICATION_NEW - Vers√£o tempor√°ria
CREATE OR REPLACE FUNCTION public.create_single_notification_new(
    p_user_id UUID,
    p_from_user_id UUID,
    p_type TEXT,
    p_message TEXT,
    p_priority INTEGER DEFAULT 1
)
RETURNS VOID
LANGUAGE plpgsql
SECURITY INVOKER
AS $function$
BEGIN
    -- Criar notifica√ß√£o simples sem agrupamento
    INSERT INTO public.notifications (
        user_id,
        from_user_id,
        type,
        message,
        read,
        created_at,
        group_key,
        group_count,
        group_data
    ) VALUES (
        p_user_id,
        p_from_user_id,
        p_type,
        p_message,
        false,
        NOW(),
        NULL,  -- Sem agrupamento para notifica√ß√µes simples
        1,
        NULL
    );
    
    RAISE NOTICE 'NOTIFICA√á√ÉO CRIADA: % para %', p_type, p_user_id;
END;
$function$;

-- 2. NOTIFY_STREAK_MILESTONE_CORRECT_NEW - Vers√£o tempor√°ria
CREATE OR REPLACE FUNCTION public.notify_streak_milestone_correct_new(
    p_user_id UUID,
    p_milestone_days INTEGER,
    p_bonus_points INTEGER DEFAULT 0
)
RETURNS VOID
LANGUAGE plpgsql
SECURITY INVOKER
AS $function$
DECLARE
    message_text TEXT;
    milestone_emoji TEXT;
BEGIN
    -- Definir emoji baseado no milestone
    CASE p_milestone_days
        WHEN 7 THEN milestone_emoji := 'üî•';
        WHEN 30 THEN milestone_emoji := '‚ö°';
        WHEN 182 THEN milestone_emoji := 'üåü';
        WHEN 365 THEN milestone_emoji := 'üëë';
        ELSE milestone_emoji := 'üéØ';
    END CASE;
    
    -- Montar mensagem baseada nos pontos b√¥nus
    IF p_bonus_points > 0 THEN
        message_text := milestone_emoji || ' Incr√≠vel! Voc√™ atingiu ' || p_milestone_days || ' dias de sequ√™ncia e ganhou ' || p_bonus_points || ' pontos b√¥nus';
    ELSE
        message_text := milestone_emoji || ' Parab√©ns! Voc√™ atingiu ' || p_milestone_days || ' dias de sequ√™ncia';
    END IF;
    
    -- Criar notifica√ß√£o usando fun√ß√£o auxiliar NOVA
    PERFORM create_single_notification_new(
        p_user_id,
        NULL,  -- Notifica√ß√£o do sistema
        'streak_milestone',
        message_text,
        3  -- Alta prioridade
    );
    
    RAISE NOTICE 'STREAK MILESTONE: % dias para % (+% pontos)', p_milestone_days, p_user_id, p_bonus_points;
END;
$function$;

-- Testar fun√ß√µes tempor√°rias
-- ============================================================================

DO $$
DECLARE
    test_user_id UUID;
BEGIN
    RAISE NOTICE 'üß™ TESTANDO FUN√á√ïES TEMPOR√ÅRIAS...';
    
    -- Buscar um usu√°rio para teste (se existir)
    SELECT id INTO test_user_id FROM public.profiles LIMIT 1;
    
    IF test_user_id IS NOT NULL THEN
        RAISE NOTICE 'üìù Testando create_single_notification_new...';
        PERFORM create_single_notification_new(
            test_user_id, 
            NULL, 
            'test_temp', 
            'Teste fun√ß√£o tempor√°ria - Migration 003 SEGURA', 
            1
        );
        
        RAISE NOTICE 'üìù Testando notify_streak_milestone_correct_new...';
        PERFORM notify_streak_milestone_correct_new(
            test_user_id, 
            7, 
            50
        );
        
        RAISE NOTICE '‚úÖ Fun√ß√µes tempor√°rias testadas com sucesso!';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è  Nenhum usu√°rio encontrado para teste';
    END IF;
END $$;

-- Substituir fun√ß√µes antigas pelas novas (estrat√©gia segura)
-- ============================================================================

DO $$
BEGIN
    RAISE NOTICE 'üîÑ SUBSTITUINDO FUN√á√ïES ANTIGAS PELAS NOVAS...';
END $$;

-- Remover fun√ß√£o antiga e criar nova com nome correto
DROP FUNCTION IF EXISTS public.create_single_notification(UUID, UUID, TEXT, TEXT, INTEGER);
DROP FUNCTION IF EXISTS public.create_single_notification(UUID, UUID, TEXT, TEXT);
DROP FUNCTION IF EXISTS public.create_single_notification(UUID, TEXT, TEXT, INTEGER);
DROP FUNCTION IF EXISTS public.create_single_notification(UUID, TEXT, TEXT);

-- Criar fun√ß√£o final com nome correto
CREATE OR REPLACE FUNCTION public.create_single_notification(
    p_user_id UUID,
    p_from_user_id UUID,
    p_type TEXT,
    p_message TEXT,
    p_priority INTEGER DEFAULT 1
)
RETURNS VOID
LANGUAGE plpgsql
SECURITY INVOKER
AS $function$
BEGIN
    -- Criar notifica√ß√£o simples sem agrupamento
    INSERT INTO public.notifications (
        user_id,
        from_user_id,
        type,
        message,
        read,
        created_at,
        group_key,
        group_count,
        group_data
    ) VALUES (
        p_user_id,
        p_from_user_id,
        p_type,
        p_message,
        false,
        NOW(),
        NULL,  -- Sem agrupamento para notifica√ß√µes simples
        1,
        NULL
    );
    
    RAISE NOTICE 'NOTIFICA√á√ÉO CRIADA: % para %', p_type, p_user_id;
END;
$function$;

-- Remover fun√ß√£o antiga de streak e criar nova
DROP FUNCTION IF EXISTS public.notify_streak_milestone_correct(UUID, INTEGER, INTEGER);
DROP FUNCTION IF EXISTS public.notify_streak_milestone_correct(UUID, INTEGER);

CREATE OR REPLACE FUNCTION public.notify_streak_milestone_correct(
    p_user_id UUID,
    p_milestone_days INTEGER,
    p_bonus_points INTEGER DEFAULT 0
)
RETURNS VOID
LANGUAGE plpgsql
SECURITY INVOKER
AS $function$
DECLARE
    message_text TEXT;
    milestone_emoji TEXT;
BEGIN
    -- Definir emoji baseado no milestone
    CASE p_milestone_days
        WHEN 7 THEN milestone_emoji := 'üî•';
        WHEN 30 THEN milestone_emoji := '‚ö°';
        WHEN 182 THEN milestone_emoji := 'üåü';
        WHEN 365 THEN milestone_emoji := 'üëë';
        ELSE milestone_emoji := 'üéØ';
    END CASE;
    
    -- Montar mensagem baseada nos pontos b√¥nus
    IF p_bonus_points > 0 THEN
        message_text := milestone_emoji || ' Incr√≠vel! Voc√™ atingiu ' || p_milestone_days || ' dias de sequ√™ncia e ganhou ' || p_bonus_points || ' pontos b√¥nus';
    ELSE
        message_text := milestone_emoji || ' Parab√©ns! Voc√™ atingiu ' || p_milestone_days || ' dias de sequ√™ncia';
    END IF;
    
    -- Criar notifica√ß√£o usando fun√ß√£o auxiliar
    PERFORM create_single_notification(
        p_user_id,
        NULL,  -- Notifica√ß√£o do sistema
        'streak_milestone',
        message_text,
        3  -- Alta prioridade
    );
    
    RAISE NOTICE 'STREAK MILESTONE: % dias para % (+% pontos)', p_milestone_days, p_user_id, p_bonus_points;
END;
$function$;

-- Implementar sistema de notifica√ß√£o de n√≠vel
-- ============================================================================

DO $$
BEGIN
    RAISE NOTICE 'üéâ IMPLEMENTANDO SISTEMA DE NOTIFICA√á√ÉO DE N√çVEL...';
END $$;

-- Remover fun√ß√£o e trigger de n√≠vel se existirem
DROP TRIGGER IF EXISTS level_up_notification_trigger ON public.user_points;
DROP FUNCTION IF EXISTS public.handle_level_up_notification();

-- Criar fun√ß√£o para mudan√ßas de n√≠vel
CREATE OR REPLACE FUNCTION public.handle_level_up_notification()
RETURNS trigger
LANGUAGE plpgsql
SECURITY INVOKER
AS $function$
DECLARE
    old_level_name TEXT;
    new_level_name TEXT;
    level_info RECORD;
    message_text TEXT;
BEGIN
    -- Verificar se o n√≠vel realmente mudou
    IF OLD.level_id IS DISTINCT FROM NEW.level_id THEN
        
        -- Buscar informa√ß√µes do novo n√≠vel
        SELECT name, color, benefits INTO level_info
        FROM public.levels 
        WHERE id = NEW.level_id;
        
        -- Buscar nome do n√≠vel anterior (se existir)
        IF OLD.level_id IS NOT NULL THEN
            SELECT name INTO old_level_name
            FROM public.levels 
            WHERE id = OLD.level_id;
        ELSE
            old_level_name := 'Iniciante';
        END IF;
        
        -- Montar mensagem de parab√©ns
        message_text := 'üéâ Parab√©ns! Voc√™ subiu para o n√≠vel "' || level_info.name || '"';
        
        -- Adicionar informa√ß√µes de benef√≠cios se existirem
        IF level_info.benefits IS NOT NULL AND level_info.benefits != '' THEN
            message_text := message_text || ' - ' || level_info.benefits;
        END IF;
        
        -- Criar notifica√ß√£o de n√≠vel
        PERFORM create_single_notification(
            NEW.user_id,
            NULL,  -- Notifica√ß√£o do sistema
            'level_up',
            message_text,
            3  -- Alta prioridade
        );
        
        RAISE NOTICE 'LEVEL UP: % subiu de % (ID:%) para % (ID:%)', 
            NEW.user_id, old_level_name, OLD.level_id, level_info.name, NEW.level_id;
    END IF;
    
    RETURN NEW;
END;
$function$;

-- Criar trigger para notifica√ß√µes de n√≠vel
CREATE TRIGGER level_up_notification_trigger 
    AFTER UPDATE ON public.user_points 
    FOR EACH ROW 
    EXECUTE FUNCTION handle_level_up_notification();

-- Limpar fun√ß√µes tempor√°rias
-- ============================================================================

DO $$
BEGIN
    RAISE NOTICE 'üßπ LIMPANDO FUN√á√ïES TEMPOR√ÅRIAS...';
END $$;

DROP FUNCTION IF EXISTS public.create_single_notification_new(UUID, UUID, TEXT, TEXT, INTEGER);
DROP FUNCTION IF EXISTS public.notify_streak_milestone_correct_new(UUID, INTEGER, INTEGER);

-- Verifica√ß√£o final
-- ============================================================================

DO $$
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE '‚úÖ VERIFICA√á√ÉO FINAL...';
END $$;

-- Verificar se todas as fun√ß√µes foram criadas
SELECT 
    'FUN√á√ïES FINAIS:' as info,
    CASE WHEN EXISTS (
        SELECT 1 FROM pg_proc WHERE proname = 'create_single_notification'
    ) THEN '‚úÖ create_single_notification'
    ELSE '‚ùå create_single_notification' END as create_single,
    
    CASE WHEN EXISTS (
        SELECT 1 FROM pg_proc WHERE proname = 'notify_streak_milestone_correct'
    ) THEN '‚úÖ notify_streak_milestone_correct'
    ELSE '‚ùå notify_streak_milestone_correct' END as notify_streak,
    
    CASE WHEN EXISTS (
        SELECT 1 FROM pg_proc WHERE proname = 'handle_level_up_notification'
    ) THEN '‚úÖ handle_level_up_notification'
    ELSE '‚ùå handle_level_up_notification' END as level_function;

-- Verificar trigger
SELECT 
    'TRIGGER CRIADO:' as info,
    CASE WHEN EXISTS (
        SELECT 1 FROM pg_trigger WHERE tgname = 'level_up_notification_trigger'
    ) THEN '‚úÖ level_up_notification_trigger'
    ELSE '‚ùå level_up_notification_trigger' END as level_trigger;

-- Teste final das fun√ß√µes
-- ============================================================================

DO $$
DECLARE
    test_user_id UUID;
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE 'üß™ TESTE FINAL DAS FUN√á√ïES...';
    
    -- Buscar um usu√°rio para teste (se existir)
    SELECT id INTO test_user_id FROM public.profiles LIMIT 1;
    
    IF test_user_id IS NOT NULL THEN
        RAISE NOTICE 'üìù Testando create_single_notification final...';
        PERFORM create_single_notification(
            test_user_id, 
            NULL, 
            'test_final', 
            'Teste final - Migration 003 SEGURA CONCLU√çDA', 
            1
        );
        
        RAISE NOTICE 'üìù Testando notify_streak_milestone_correct final...';
        PERFORM notify_streak_milestone_correct(
            test_user_id, 
            30, 
            100
        );
        
        RAISE NOTICE '‚úÖ Fun√ß√µes finais testadas com sucesso!';
        RAISE NOTICE '‚ö†Ô∏è  Notifica√ß√µes de teste criadas - podem ser removidas se necess√°rio';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è  Nenhum usu√°rio encontrado para teste';
    END IF;
END $$;

-- Finaliza√ß√£o
-- ============================================================================

DO $$
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE 'üéâ MIGRATION 003 SEGURA CONCLU√çDA COM SUCESSO!';
    RAISE NOTICE '';
    RAISE NOTICE 'üìä ESTRAT√âGIA SEGURA APLICADA:';
    RAISE NOTICE '   1Ô∏è‚É£ Criadas fun√ß√µes tempor√°rias';
    RAISE NOTICE '   2Ô∏è‚É£ Testadas fun√ß√µes tempor√°rias';
    RAISE NOTICE '   3Ô∏è‚É£ Substitu√≠das fun√ß√µes antigas';
    RAISE NOTICE '   4Ô∏è‚É£ Limpadas fun√ß√µes tempor√°rias';
    RAISE NOTICE '';
    RAISE NOTICE 'üìä CORRE√á√ïES APLICADAS:';
    RAISE NOTICE '   ‚úÖ create_single_notification() - Recriada com VOID';
    RAISE NOTICE '   ‚úÖ notify_streak_milestone_correct() - Criada';
    RAISE NOTICE '   ‚úÖ handle_level_up_notification() - Criada';
    RAISE NOTICE '   ‚úÖ level_up_notification_trigger - Criado';
    RAISE NOTICE '';
    RAISE NOTICE 'üîî NOTIFICA√á√ïES AGORA FUNCIONAIS:';
    RAISE NOTICE '   üèÜ Badges - Funcionar√£o automaticamente';
    RAISE NOTICE '   üî• Streaks - Funcionar√£o automaticamente';
    RAISE NOTICE '   üéâ N√≠veis - Sistema implementado';
    RAISE NOTICE '';
    RAISE NOTICE '‚è±Ô∏è  TEMPO DE INATIVIDADE: ZERO (migra√ß√£o segura)';
END $$;

