-- ============================================================================
-- MIGRATION 010: CORRE√á√ÉO DO C√ÅLCULO DE B√îNUS DE STREAK
-- ============================================================================
-- Data: 2025-09-16
-- Objetivo: Corrigir c√°lculo de b√¥nus para usar apenas pontos dos √∫ltimos X dias
-- Problema: Fun√ß√£o atual calcula sobre TODOS os pontos, deveria ser s√≥ dos √∫ltimos dias
-- ============================================================================

-- CORRE√á√ÉO: NOVA FUN√á√ÉO DE C√ÅLCULO DE B√îNUS DE STREAK
-- ============================================================================

CREATE OR REPLACE FUNCTION public.calculate_streak_bonus(p_user_id uuid, p_milestone integer)
RETURNS integer
LANGUAGE plpgsql
AS $$
DECLARE
    v_multiplier DECIMAL(3,2);
    v_days_back INTEGER;
    v_points_period INTEGER;
    v_bonus INTEGER;
BEGIN
    -- Determinar multiplicador e per√≠odo baseado no milestone
    CASE p_milestone
        WHEN 7 THEN 
            v_multiplier := 1.2;   -- +20%
            v_days_back := 7;
        WHEN 30 THEN 
            v_multiplier := 1.5;   -- +50%
            v_days_back := 30;
        WHEN 182 THEN 
            v_multiplier := 1.8;   -- +80%
            v_days_back := 182;
        WHEN 365 THEN 
            v_multiplier := 2.0;   -- +100%
            v_days_back := 365;
        ELSE 
            v_multiplier := 1.0;
            v_days_back := 0;
    END CASE;
    
    -- Se n√£o √© um milestone v√°lido, retornar 0
    IF v_days_back = 0 THEN
        RETURN 0;
    END IF;
    
    -- Calcular pontos dos √∫ltimos X dias
    SELECT COALESCE(SUM(points_earned), 0) INTO v_points_period
    FROM public.points_history 
    WHERE user_id = p_user_id
    AND created_at >= (CURRENT_DATE - INTERVAL '1 day' * v_days_back)
    AND action_type != 'streak_bonus_retroactive'; -- Excluir b√¥nus anteriores
    
    -- Calcular b√¥nus: Pontos do per√≠odo √ó (Multiplicador - 1)
    v_bonus := ROUND(v_points_period * (v_multiplier - 1));
    
    RAISE NOTICE 'C√°lculo de b√¥nus: User % - Milestone % dias - Pontos per√≠odo: % - B√¥nus: %', 
        p_user_id, p_milestone, v_points_period, v_bonus;
    
    RETURN v_bonus;
END;
$$;

-- ATUALIZAR FUN√á√ÉO DE APLICA√á√ÉO DE B√îNUS RETROATIVO
-- ============================================================================

CREATE OR REPLACE FUNCTION public.apply_streak_bonus_retroactive(p_user_id uuid)
RETURNS void
LANGUAGE plpgsql
AS $$
DECLARE
    v_current_streak INTEGER;
    v_bonus_points INTEGER;
    v_milestone INTEGER;
BEGIN
    -- Buscar streak atual do usu√°rio
    SELECT current_streak INTO v_current_streak
    FROM user_streaks 
    WHERE user_id = p_user_id;
    
    -- Se n√£o tem streak, n√£o aplicar b√¥nus
    IF v_current_streak IS NULL OR v_current_streak < 7 THEN
        RETURN;
    END IF;
    
    -- Determinar milestone atingido
    CASE 
        WHEN v_current_streak >= 365 THEN v_milestone := 365;
        WHEN v_current_streak >= 182 THEN v_milestone := 182;
        WHEN v_current_streak >= 30 THEN v_milestone := 30;
        WHEN v_current_streak >= 7 THEN v_milestone := 7;
        ELSE RETURN; -- N√£o atingiu milestone
    END CASE;
    
    -- Calcular b√¥nus usando fun√ß√£o corrigida (agora recebe user_id)
    v_bonus_points := calculate_streak_bonus(p_user_id, v_milestone);
    
    -- Se b√¥nus √© 0, n√£o aplicar
    IF v_bonus_points <= 0 THEN
        RETURN;
    END IF;
    
    -- Verificar se j√° foi aplicado este b√¥nus
    IF NOT EXISTS (
        SELECT 1 FROM points_history 
        WHERE user_id = p_user_id 
        AND action_type = 'streak_bonus_retroactive'
        AND reference_type = 'milestone_' || v_milestone::text
    ) THEN
        -- Aplicar b√¥nus retroativo
        INSERT INTO points_history (
            user_id, 
            points_earned, 
            action_type, 
            reference_id, 
            reference_type,
            created_at
        ) VALUES (
            p_user_id,
            v_bonus_points,
            'streak_bonus_retroactive',
            p_user_id,
            'milestone_' || v_milestone::text,
            NOW()
        );
        
        -- Atualizar total de pontos
        PERFORM update_user_total_points(p_user_id);
        
        RAISE NOTICE 'B√¥nus retroativo aplicado: User % - Streak % dias - Milestone % - B√¥nus % pontos', 
            p_user_id, v_current_streak, v_milestone, v_bonus_points;
    END IF;
END;
$$;

-- RECALCULAR B√îNUS PARA USU√ÅRIOS QUE J√Å RECEBERAM (CORRE√á√ÉO)
-- ============================================================================

DO $$
DECLARE
    user_record RECORD;
    v_old_bonus INTEGER;
    v_new_bonus INTEGER;
    v_difference INTEGER;
BEGIN
    -- Para cada usu√°rio que j√° recebeu b√¥nus retroativo
    FOR user_record IN 
        SELECT DISTINCT 
            ph.user_id,
            ph.points_earned as old_bonus,
            CAST(REPLACE(ph.reference_type, 'milestone_', '') AS INTEGER) as milestone
        FROM points_history ph
        WHERE ph.action_type = 'streak_bonus_retroactive'
    LOOP
        -- Calcular novo b√¥nus correto
        v_new_bonus := calculate_streak_bonus(user_record.user_id, user_record.milestone);
        v_old_bonus := user_record.old_bonus;
        v_difference := v_new_bonus - v_old_bonus;
        
        -- Se h√° diferen√ßa, aplicar corre√ß√£o
        IF v_difference != 0 THEN
            -- Adicionar entrada de corre√ß√£o
            INSERT INTO points_history (
                user_id, 
                points_earned, 
                action_type, 
                reference_id, 
                reference_type,
                created_at
            ) VALUES (
                user_record.user_id,
                v_difference,
                'streak_bonus_correction',
                user_record.user_id,
                'milestone_' || user_record.milestone::text || '_correction',
                NOW()
            );
            
            -- Atualizar total de pontos
            PERFORM update_user_total_points(user_record.user_id);
            
            RAISE NOTICE 'Corre√ß√£o aplicada: User % - B√¥nus antigo: % - B√¥nus novo: % - Diferen√ßa: %', 
                user_record.user_id, v_old_bonus, v_new_bonus, v_difference;
        END IF;
    END LOOP;
END $$;

-- ============================================================================
-- RESUMO FINAL
-- ============================================================================

DO $$
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE 'üéâ ============================================================================';
    RAISE NOTICE 'üéâ MIGRATION 010 CONCLU√çDA - CORRE√á√ÉO DE C√ÅLCULO DE B√îNUS';
    RAISE NOTICE 'üéâ ============================================================================';
    RAISE NOTICE '';
    RAISE NOTICE '‚úÖ CORRE√á√ÉO 1: Fun√ß√£o calculate_streak_bonus corrigida';
    RAISE NOTICE '   - Agora calcula sobre pontos dos √∫ltimos X dias apenas';
    RAISE NOTICE '   - 7 dias: pontos dos √∫ltimos 7 dias √ó 20%%';
    RAISE NOTICE '   - 30 dias: pontos dos √∫ltimos 30 dias √ó 50%%';
    RAISE NOTICE '   - 182 dias: pontos dos √∫ltimos 182 dias √ó 80%%';
    RAISE NOTICE '   - 365 dias: pontos dos √∫ltimos 365 dias √ó 100%%';
    RAISE NOTICE '';
    RAISE NOTICE '‚úÖ CORRE√á√ÉO 2: Fun√ß√£o apply_streak_bonus_retroactive atualizada';
    RAISE NOTICE '   - Usa nova l√≥gica de c√°lculo';
    RAISE NOTICE '';
    RAISE NOTICE '‚úÖ CORRE√á√ÉO 3: B√¥nus incorretos recalculados e corrigidos';
    RAISE NOTICE '   - Usu√°rios que receberam b√¥nus sobre todos os pontos';
    RAISE NOTICE '   - Agora recebem corre√ß√£o (positiva ou negativa)';
    RAISE NOTICE '';
    RAISE NOTICE 'üéØ RESULTADO: B√¥nus agora calculado corretamente!';
    RAISE NOTICE '';
    RAISE NOTICE '============================================================================';
END $$;

