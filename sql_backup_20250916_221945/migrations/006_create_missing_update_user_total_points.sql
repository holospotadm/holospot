-- ============================================================================
-- MIGRATION 006: CRIAR FUN√á√ÉO update_user_total_points AUSENTE
-- ============================================================================
-- Solu√ß√£o definitiva para notifica√ß√µes de level-up
-- Esta fun√ß√£o estava sendo chamada mas n√£o existia!
-- ============================================================================

-- 1. VERIFICAR SE FUN√á√ÉO J√Å EXISTE
-- ============================================================================

DO $$
BEGIN
    IF EXISTS (
        SELECT 1 FROM pg_proc 
        WHERE proname = 'update_user_total_points'
    ) THEN
        RAISE NOTICE '‚ö†Ô∏è Fun√ß√£o update_user_total_points j√° existe - ser√° recriada';
        DROP FUNCTION IF EXISTS public.update_user_total_points(UUID);
    ELSE
        RAISE NOTICE '‚ùå Fun√ß√£o update_user_total_points n√£o existe - criando...';
    END IF;
END $$;

-- 2. CRIAR FUN√á√ÉO update_user_total_points
-- ============================================================================

CREATE OR REPLACE FUNCTION public.update_user_total_points(p_user_id UUID)
RETURNS VOID
LANGUAGE plpgsql
SECURITY INVOKER
AS $function$
DECLARE
    total_points_calculated INTEGER;
    current_level_id INTEGER;
    new_level_id INTEGER;
    old_level_id INTEGER;
    level_changed BOOLEAN := FALSE;
BEGIN
    -- 1. Calcular total de pontos do hist√≥rico
    SELECT COALESCE(SUM(points_earned), 0) 
    INTO total_points_calculated
    FROM points_history 
    WHERE user_id = p_user_id;
    
    RAISE NOTICE 'CALCULATING POINTS: User % has % total points', p_user_id, total_points_calculated;
    
    -- 2. Determinar n√≠vel correto baseado nos pontos
    SELECT id INTO new_level_id
    FROM levels 
    WHERE total_points_calculated >= min_points
    ORDER BY min_points DESC
    LIMIT 1;
    
    -- Se n√£o encontrou n√≠vel, usar n√≠vel 1
    IF new_level_id IS NULL THEN
        SELECT id INTO new_level_id FROM levels ORDER BY id ASC LIMIT 1;
        IF new_level_id IS NULL THEN
            new_level_id := 1; -- Fallback absoluto
        END IF;
    END IF;
    
    RAISE NOTICE 'LEVEL CALCULATED: User % should be level %', p_user_id, new_level_id;
    
    -- 3. Buscar n√≠vel atual do usu√°rio
    SELECT level_id INTO old_level_id
    FROM user_points 
    WHERE user_id = p_user_id;
    
    -- 4. Verificar se n√≠vel mudou
    IF old_level_id IS DISTINCT FROM new_level_id THEN
        level_changed := TRUE;
        RAISE NOTICE 'LEVEL CHANGE: User % - %‚Üí%', p_user_id, old_level_id, new_level_id;
    END IF;
    
    -- 5. Atualizar ou inserir na tabela user_points
    INSERT INTO user_points (
        user_id, 
        total_points, 
        level_id,
        current_level,
        created_at, 
        updated_at
    ) VALUES (
        p_user_id, 
        total_points_calculated, 
        new_level_id,
        new_level_id,
        NOW(), 
        NOW()
    )
    ON CONFLICT (user_id) DO UPDATE SET
        total_points = total_points_calculated,
        level_id = new_level_id,
        current_level = new_level_id,
        updated_at = NOW();
    
    -- 6. Log final
    IF level_changed THEN
        RAISE NOTICE 'üéâ LEVEL UP! User % advanced to level %', p_user_id, new_level_id;
    ELSE
        RAISE NOTICE '‚úÖ POINTS UPDATED: User % - % points, level %', p_user_id, total_points_calculated, new_level_id;
    END IF;
        
END;
$function$;

-- 3. COMENT√ÅRIOS E DOCUMENTA√á√ÉO
-- ============================================================================

COMMENT ON FUNCTION public.update_user_total_points(UUID) IS 
'Atualiza total de pontos e n√≠vel do usu√°rio baseado no hist√≥rico.
CR√çTICO: Esta fun√ß√£o dispara o trigger de level-up quando n√≠vel muda.
Chamada por: handle_post_insert_secure, handle_comment_insert_secure, etc.';

-- 4. TESTE DA FUN√á√ÉO
-- ============================================================================

DO $$
DECLARE
    test_user_id UUID;
    points_before INTEGER;
    level_before INTEGER;
    points_after INTEGER;
    level_after INTEGER;
BEGIN
    -- Buscar usu√°rio para teste
    SELECT user_id, total_points, level_id 
    INTO test_user_id, points_before, level_before
    FROM user_points 
    LIMIT 1;
    
    IF test_user_id IS NULL THEN
        RAISE NOTICE 'TESTE CANCELADO: Nenhum usu√°rio encontrado';
        RETURN;
    END IF;
    
    RAISE NOTICE 'TESTE INICIADO: User % - Points: %, Level: %', 
        test_user_id, points_before, level_before;
    
    -- Executar fun√ß√£o
    PERFORM update_user_total_points(test_user_id);
    
    -- Verificar resultado
    SELECT total_points, level_id 
    INTO points_after, level_after
    FROM user_points 
    WHERE user_id = test_user_id;
    
    RAISE NOTICE 'TESTE CONCLU√çDO: User % - Points: %‚Üí%, Level: %‚Üí%', 
        test_user_id, points_before, points_after, level_before, level_after;
        
END $$;

-- 5. VERIFICA√á√ÉO FINAL
-- ============================================================================

SELECT 
    'FUN√á√ÉO CRIADA' as status,
    CASE WHEN EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'update_user_total_points') 
         THEN '‚úÖ update_user_total_points EXISTS' 
         ELSE '‚ùå update_user_total_points MISSING' END as function_status;

-- 6. INSTRU√á√ïES DE USO
-- ============================================================================

/*
COMO TESTAR:

1. Execute esta migration no Supabase
2. Fa√ßa uma a√ß√£o que gere pontos (criar post, coment√°rio, etc.)
3. Verifique se level_id foi atualizado:
   SELECT user_id, total_points, level_id FROM user_points WHERE user_id = 'seu-id';
4. Verifique se notifica√ß√£o foi criada:
   SELECT * FROM notifications WHERE type = 'level_up' ORDER BY created_at DESC;

LOGS ESPERADOS:
- CALCULATING POINTS: User xxx has yyy total points
- LEVEL CALCULATED: User xxx should be level yyy
- LEVEL CHANGE: User xxx - old‚Üínew (se mudou)
- üéâ LEVEL UP! User xxx advanced to level yyy (se mudou)

Se n√£o aparecer logs, a fun√ß√£o n√£o est√° sendo chamada.
Se aparecer logs mas level_id n√£o mudar, h√° problema na l√≥gica.
Se level_id mudar mas notifica√ß√£o n√£o aparecer, problema no trigger.
*/

