-- ============================================================================
-- REACTIONS TABLE - Sistema de Rea√ß√µes
-- ============================================================================
-- Tabela que armazena todas as rea√ß√µes dos usu√°rios em posts
-- Sistema de engajamento emocional do HoloSpot
-- ============================================================================

CREATE TABLE IF NOT EXISTS public.reactions (
    -- Identificador √∫nico da rea√ß√£o
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    
    -- Refer√™ncia ao post que recebeu a rea√ß√£o
    post_id UUID REFERENCES public.posts(id) ON DELETE CASCADE,
    
    -- Refer√™ncia ao usu√°rio que deu a rea√ß√£o
    user_id UUID REFERENCES public.profiles(id) ON DELETE CASCADE,
    
    -- Tipo da rea√ß√£o (obrigat√≥rio)
    type TEXT NOT NULL,
    
    -- Timestamp de cria√ß√£o
    created_at TIMESTAMPTZ DEFAULT now()
);

-- ============================================================================
-- CONSTRAINTS DA TABELA REACTIONS
-- ============================================================================

-- Constraint √∫nica para evitar rea√ß√µes duplicadas do mesmo usu√°rio no mesmo post
ALTER TABLE public.reactions 
ADD CONSTRAINT unique_user_post_reaction 
UNIQUE (user_id, post_id);

-- ============================================================================
-- √çNDICES DA TABELA REACTIONS
-- ============================================================================

-- √çndice para busca por post (consulta mais comum)
CREATE INDEX IF NOT EXISTS idx_reactions_post_id 
ON public.reactions (post_id);

-- √çndice para busca por usu√°rio
CREATE INDEX IF NOT EXISTS idx_reactions_user_id 
ON public.reactions (user_id);

-- √çndice para busca por tipo de rea√ß√£o
CREATE INDEX IF NOT EXISTS idx_reactions_type 
ON public.reactions (type);

-- √çndice para ordena√ß√£o por data
CREATE INDEX IF NOT EXISTS idx_reactions_created_at 
ON public.reactions (created_at DESC);

-- √çndice composto para busca eficiente por post e tipo
CREATE INDEX IF NOT EXISTS idx_reactions_post_type 
ON public.reactions (post_id, type);

-- √çndice composto para busca por usu√°rio e data
CREATE INDEX IF NOT EXISTS idx_reactions_user_created 
ON public.reactions (user_id, created_at DESC);

-- ============================================================================
-- TRIGGERS DA TABELA REACTIONS
-- ============================================================================

-- Trigger para verifica√ß√£o autom√°tica de badges ap√≥s rea√ß√£o
CREATE TRIGGER auto_badge_check_bonus_reactions 
    AFTER INSERT ON public.reactions 
    FOR EACH ROW 
    EXECUTE FUNCTION auto_check_badges_with_bonus_after_action();

-- Trigger para opera√ß√µes seguras de inser√ß√£o (pontos)
CREATE TRIGGER reaction_insert_secure_trigger 
    AFTER INSERT ON public.reactions 
    FOR EACH ROW 
    EXECUTE FUNCTION handle_reaction_insert_secure();

-- Trigger para opera√ß√µes seguras de dele√ß√£o (pontos)
CREATE TRIGGER reaction_delete_secure_trigger 
    AFTER DELETE ON public.reactions 
    FOR EACH ROW 
    EXECUTE FUNCTION handle_reaction_delete_secure();

-- Trigger para pontos simplificados
CREATE TRIGGER reaction_points_simple_trigger 
    AFTER INSERT ON public.reactions 
    FOR EACH ROW 
    EXECUTE FUNCTION handle_reaction_points_simple();

-- Trigger para notifica√ß√£o simples
CREATE TRIGGER reaction_simple_notification_trigger 
    AFTER INSERT ON public.reactions 
    FOR EACH ROW 
    EXECUTE FUNCTION handle_reaction_simple();

-- ============================================================================
-- COMENT√ÅRIOS E DOCUMENTA√á√ÉO
-- ============================================================================

COMMENT ON TABLE public.reactions IS 
'Tabela que armazena todas as rea√ß√µes dos usu√°rios em posts.
Sistema de engajamento emocional do HoloSpot.';

COMMENT ON COLUMN public.reactions.id IS 'Identificador √∫nico da rea√ß√£o (UUID)';
COMMENT ON COLUMN public.reactions.post_id IS 'Refer√™ncia ao post que recebeu a rea√ß√£o';
COMMENT ON COLUMN public.reactions.user_id IS 'Refer√™ncia ao usu√°rio que deu a rea√ß√£o';
COMMENT ON COLUMN public.reactions.type IS 'Tipo da rea√ß√£o (touched, inspired, grateful, etc.)';
COMMENT ON COLUMN public.reactions.created_at IS 'Timestamp de quando a rea√ß√£o foi criada';

-- ============================================================================
-- NOTAS SOBRE A TABELA REACTIONS
-- ============================================================================
-- 
-- Estrutura Real Extra√≠da:
-- - 5 campos simples e diretos
-- - UUID como chave prim√°ria com gen_random_uuid()
-- - Foreign keys para posts e profiles
-- - Tipo obrigat√≥rio (TEXT)
-- - Timestamp autom√°tico de cria√ß√£o
-- 
-- Relacionamentos:
-- - reactions.post_id ‚Üí posts.id (CASCADE DELETE)
-- - reactions.user_id ‚Üí profiles.id (CASCADE DELETE)
-- 
-- Tipos de Rea√ß√£o Comuns:
-- - touched: Emocionado/tocado (‚ù§Ô∏è)
-- - inspired: Inspirado (‚ú®)
-- - grateful: Grato (üôè)
-- - proud: Orgulhoso (üëè)
-- - amazed: Impressionado (üòÆ)
-- 
-- Sistema de Pontua√ß√£o:
-- - Quem d√° rea√ß√£o: +3 pontos
-- - Autor do post: +2 pontos (se diferente)
-- - Registrado em points_history
-- 
-- Sistema de Notifica√ß√µes:
-- - Notifica autor do post quando recebe rea√ß√£o
-- - Inclui emoji espec√≠fico por tipo
-- - Mensagens padronizadas
-- 
-- Triggers Ativos (5 total):
-- 1. auto_badge_check_bonus_reactions - Verifica√ß√£o de badges
-- 2. reaction_insert_secure_trigger - Pontos na inser√ß√£o (seguro)
-- 3. reaction_delete_secure_trigger - Pontos na dele√ß√£o (seguro)
-- 4. reaction_points_simple_trigger - Pontos simplificados
-- 5. reaction_simple_notification_trigger - Notifica√ß√£o simples
-- 
-- Funcionalidades:
-- - Rea√ß√µes emocionais em posts
-- - Sistema de engajamento
-- - Pontua√ß√£o por intera√ß√£o
-- - Notifica√ß√µes autom√°ticas
-- - Preven√ß√£o de duplicatas
-- 
-- Valida√ß√µes:
-- - Tipo obrigat√≥rio
-- - Uma rea√ß√£o por usu√°rio por post
-- - Refer√™ncias v√°lidas (FK)
-- - Preven√ß√£o de auto-rea√ß√£o (l√≥gica)
-- 
-- Performance:
-- - √çndices otimizados para consultas comuns
-- - Busca eficiente por post e tipo
-- - Busca por usu√°rio e data
-- - Constraint de unicidade
-- 
-- Integridade:
-- - Foreign keys garantem refer√™ncias v√°lidas
-- - Constraint √∫nica previne duplicatas
-- - Dele√ß√£o em cascata mant√©m consist√™ncia
-- - Triggers garantem pontua√ß√£o correta
-- 
-- An√°lise e M√©tricas:
-- - Contagem de rea√ß√µes por post
-- - Tipos de rea√ß√£o mais populares
-- - Engajamento por usu√°rio
-- - An√°lise temporal de rea√ß√µes
-- 
-- Manuten√ß√£o:
-- - Tabela de crescimento cont√≠nuo
-- - Monitoramento de performance
-- - Limpeza de dados √≥rf√£os
-- - Backup regular
-- 
-- ============================================================================

